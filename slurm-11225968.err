/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:627: DtypeWarning: Columns (7,8,32,33,34,36) have mixed types. Specify dtype option on import or set low_memory=False.
  ml_dataset = pd.read_csv(os.path.join(self.dataPath, self.clean, 'ml_dataset_' + self.date +'.csv'), index_col=0)
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/pandas/core/internals/blocks.py:366: RuntimeWarning: invalid value encountered in log
  result = func(self.values, **kwargs)
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:720: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:729: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized_train['const'] = 1
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
