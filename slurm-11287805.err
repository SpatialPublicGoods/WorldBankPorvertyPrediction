/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:622: DtypeWarning: Columns (7,8,33,34,35,37) have mixed types. Specify dtype option on import or set low_memory=False.
  ml_dataset = pd.read_csv(os.path.join(self.dataPath, self.clean, 'ml_dataset_' + self.date +'.csv'), index_col=0)
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/pandas/core/internals/blocks.py:366: RuntimeWarning: invalid value encountered in log
  result = func(self.values, **kwargs)
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized_train['const'] = 1
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/03_run_income_prediction_gradient_boosting.py:183: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  XGB_standardized_train['const'] = 1
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/03_run_income_prediction_gradient_boosting.py:183: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  XGB_standardized_train['const'] = 1
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized_train['const'] = 1
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized_train['const'] = 1
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/03_run_income_prediction_gradient_boosting.py:310: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  XGB_standardized_validation['const'] = 1
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/03_run_income_prediction_gradient_boosting.py:310: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  XGB_standardized_validation['const'] = 1
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:622: DtypeWarning: Columns (7,8) have mixed types. Specify dtype option on import or set low_memory=False.
  ml_dataset = pd.read_csv(os.path.join(self.dataPath, self.clean, 'ml_dataset_' + self.date +'.csv'), index_col=0)
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/pandas/core/internals/blocks.py:366: RuntimeWarning: invalid value encountered in log
  result = func(self.values, **kwargs)
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized_train['const'] = 1
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:719: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized[f"{var}_x_{dummy}"] = interaction_term
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/consolidate_ml_dataframe.py:724: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized_train['const'] = 1
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:85: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized_train['const'] = 1
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:88: PerformanceWarning: DataFrame is highly fragmented.  This is usually the result of calling `frame.insert` many times, which has poor performance.  Consider joining all columns at once using pd.concat(axis=1) instead. To get a de-fragmented frame, use `newframe = frame.copy()`
  X_standardized_validation['const'] = 1
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:767: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if not hasattr(array, "sparse") and array.dtypes.apply(is_sparse).any():
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:605: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/sklearn/utils/validation.py:614: FutureWarning: is_sparse is deprecated and will be removed in a future version. Check `isinstance(dtype, pd.SparseDtype)` instead.
  if is_sparse(pd_dtype) or not is_extension_array_dtype(pd_dtype):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1498: FutureWarning: is_categorical_dtype is deprecated and will be removed in a future version. Use isinstance(dtype, CategoricalDtype) instead
  if pd.api.types.is_categorical_dtype(vector):
/apps/python/3.10/3.10.9/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.
  with pd.option_context('mode.use_inf_as_na', True):
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:304: UserWarning: linestyle is redundantly defined by the 'linestyle' keyword argument and the fmt string "-." (-> linestyle='-.'). The keyword argument will take precedence.
  plt.errorbar(income_series['date'], income_series['income_pc_hat_weighted'], yerr=income_series['std_hat_mean'],
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:349: UserWarning: linestyle is redundantly defined by the 'linestyle' keyword argument and the fmt string "-." (-> linestyle='-.'). The keyword argument will take precedence.
  plt.errorbar(income_series_urban['date'], income_series_urban['income_pc_hat_weighted'], yerr=income_series_urban['std_hat_mean'],
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:354: UserWarning: linestyle is redundantly defined by the 'linestyle' keyword argument and the fmt string "-." (-> linestyle='-.'). The keyword argument will take precedence.
  plt.errorbar(income_series_rural['date'], income_series_rural['income_pc_hat_weighted'], yerr=income_series_rural['std_hat_mean'],
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:396: UserWarning: linestyle is redundantly defined by the 'linestyle' keyword argument and the fmt string "--" (-> linestyle='--'). The keyword argument will take precedence.
  plt.errorbar(income_series['date'], income_series['income_pc_hat_weighted'], yerr=income_series['std_hat_mean'],
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:444: UserWarning: linestyle is redundantly defined by the 'linestyle' keyword argument and the fmt string "-." (-> linestyle='-.'). The keyword argument will take precedence.
  plt.errorbar(income_series['date'], income_series['poor_hat_685'], yerr=income_series['std_685_mean'],
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:448: UserWarning: linestyle is redundantly defined by the 'linestyle' keyword argument and the fmt string "-." (-> linestyle='-.'). The keyword argument will take precedence.
  plt.errorbar(income_series['date'], income_series['poor_hat_365'], yerr=income_series['std_365_mean'],
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:452: UserWarning: linestyle is redundantly defined by the 'linestyle' keyword argument and the fmt string "-." (-> linestyle='-.'). The keyword argument will take precedence.
  plt.errorbar(income_series['date'], income_series['poor_hat_215'], yerr=income_series['std_215_mean'],
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:503: UserWarning: linestyle is redundantly defined by the 'linestyle' keyword argument and the fmt string "-." (-> linestyle='-.'). The keyword argument will take precedence.
  plt.errorbar(income_series_urban['date'], income_series_urban['poor_hat_685'], yerr=income_series_urban['std_685_mean'],
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:507: UserWarning: linestyle is redundantly defined by the 'linestyle' keyword argument and the fmt string "-." (-> linestyle='-.'). The keyword argument will take precedence.
  plt.errorbar(income_series_urban['date'], income_series_urban['poor_hat_365'], yerr=income_series_urban['std_365_mean'],
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:511: UserWarning: linestyle is redundantly defined by the 'linestyle' keyword argument and the fmt string "-." (-> linestyle='-.'). The keyword argument will take precedence.
  plt.errorbar(income_series_urban['date'], income_series_urban['poor_hat_215'], yerr=income_series_urban['std_215_mean'],
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:533: UserWarning: linestyle is redundantly defined by the 'linestyle' keyword argument and the fmt string "-." (-> linestyle='-.'). The keyword argument will take precedence.
  plt.errorbar(income_series_rural['date'], income_series_rural['poor_hat_685'], yerr=income_series_rural['std_685_mean'],
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:537: UserWarning: linestyle is redundantly defined by the 'linestyle' keyword argument and the fmt string "-." (-> linestyle='-.'). The keyword argument will take precedence.
  plt.errorbar(income_series_rural['date'], income_series_rural['poor_hat_365'], yerr=income_series_rural['std_365_mean'],
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:541: UserWarning: linestyle is redundantly defined by the 'linestyle' keyword argument and the fmt string "-." (-> linestyle='-.'). The keyword argument will take precedence.
  plt.errorbar(income_series_rural['date'], income_series_rural['poor_hat_215'], yerr=income_series_rural['std_215_mean'],
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:558: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_urban['poor_685'] = (df_urban['income_pc'] <= df_urban['lp_685usd_ppp']) * household_weight
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:559: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_urban['poor_365'] = (df_urban['income_pc'] <= df_urban['lp_365usd_ppp']) * household_weight
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:560: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_urban['poor_215'] = (df_urban['income_pc'] <= df_urban['lp_215usd_ppp']) * household_weight
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:561: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_urban['poor_hat_685'] = (df_urban['income_pc_hat'] <= df_urban['lp_685usd_ppp']) * household_weight
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:562: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_urban['poor_hat_365'] = (df_urban['income_pc_hat'] <= df_urban['lp_365usd_ppp']) * household_weight
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:563: SettingWithCopyWarning: 
A value is trying to be set on a copy of a slice from a DataFrame.
Try using .loc[row_indexer,col_indexer] = value instead

See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy
  df_urban['poor_hat_215'] = (df_urban['income_pc_hat'] <= df_urban['lp_215usd_ppp']) * household_weight
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:592: UserWarning: linestyle is redundantly defined by the 'linestyle' keyword argument and the fmt string "-." (-> linestyle='-.'). The keyword argument will take precedence.
  plt.errorbar(income_series_lima['date'], income_series_lima['poor_hat_685'], yerr=income_series_lima['std_685_mean'],
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:596: UserWarning: linestyle is redundantly defined by the 'linestyle' keyword argument and the fmt string "-." (-> linestyle='-.'). The keyword argument will take precedence.
  plt.errorbar(income_series_lima['date'], income_series_lima['poor_hat_365'], yerr=income_series_lima['std_365_mean'],
/home/fcalle0/GitHub/WorldBankPorvertyPrediction/code/04_generate_prediction_report_gb.py:600: UserWarning: linestyle is redundantly defined by the 'linestyle' keyword argument and the fmt string "-." (-> linestyle='-.'). The keyword argument will take precedence.
  plt.errorbar(income_series_lima['date'], income_series_lima['poor_hat_215'], yerr=income_series_lima['std_215_mean'],
